/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_HEDERA_PROTO_TRANSACTION_BODY_PB_H_INCLUDED
#define PB_HEDERA_PROTO_TRANSACTION_BODY_PB_H_INCLUDED
#include <pb.h>
#include "proto/basic_types.pb.h"
#include "proto/crypto_create.pb.h"
#include "proto/crypto_transfer.pb.h"
#include "proto/crypto_update.pb.h"
#include "proto/duration.pb.h"
#include "proto/token_associate.pb.h"
#include "proto/token_burn.pb.h"
#include "proto/token_dissociate.pb.h"
#include "proto/token_mint.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 A single transaction. All transaction types are possible here. */
typedef struct _Hedera_TransactionBody { 
    /* *
 The ID for this transaction, which includes the payer's account (the
 account paying the transaction fee). If two transactions have the same
 transactionID, they won't both have an effect */
    bool has_transactionID;
    Hedera_TransactionID transactionID; 
    /* *
 The account of the node that submits the client's transaction to the
 network */
    bool has_nodeAccountID;
    Hedera_AccountID nodeAccountID; 
    /* *
 The maximum transaction fee the client is willing to pay */
    uint64_t transactionFee; 
    /* *
 The transaction is invalid if consensusTimestamp >
 transactionID.transactionValidStart + transactionValidDuration */
    bool has_transactionValidDuration;
    Hedera_Duration transactionValidDuration; 
    /* *
 Should a record of this transaction be generated? (A receipt is always
 generated, but the record is optional) */
    bool generateRecord; 
    /* *
 Any notes or descriptions that should be put into the record (max length
 100) */
    char memo[100]; 
    /* *
 Create a new cryptocurrency account */
    pb_size_t which_data;
    union {
        Hedera_CryptoCreateTransactionBody cryptoCreateAccount;
        Hedera_CryptoTransferTransactionBody cryptoTransfer;
        Hedera_CryptoUpdateTransactionBody cryptoUpdateAccount;
        Hedera_TokenMintTransactionBody tokenMint;
        Hedera_TokenBurnTransactionBody tokenBurn;
        Hedera_TokenAssociateTransactionBody tokenAssociate;
        Hedera_TokenDissociateTransactionBody tokenDissociate;
    } data; 
} Hedera_TransactionBody;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Hedera_TransactionBody_init_default      {false, Hedera_TransactionID_init_default, false, Hedera_AccountID_init_default, 0, false, Hedera_Duration_init_default, 0, "", 0, {Hedera_CryptoCreateTransactionBody_init_default}}
#define Hedera_TransactionBody_init_zero         {false, Hedera_TransactionID_init_zero, false, Hedera_AccountID_init_zero, 0, false, Hedera_Duration_init_zero, 0, "", 0, {Hedera_CryptoCreateTransactionBody_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Hedera_TransactionBody_transactionID_tag 1
#define Hedera_TransactionBody_nodeAccountID_tag 2
#define Hedera_TransactionBody_transactionFee_tag 3
#define Hedera_TransactionBody_transactionValidDuration_tag 4
#define Hedera_TransactionBody_generateRecord_tag 5
#define Hedera_TransactionBody_memo_tag          6
#define Hedera_TransactionBody_cryptoCreateAccount_tag 11
#define Hedera_TransactionBody_cryptoTransfer_tag 14
#define Hedera_TransactionBody_cryptoUpdateAccount_tag 15
#define Hedera_TransactionBody_tokenMint_tag     37
#define Hedera_TransactionBody_tokenBurn_tag     38
#define Hedera_TransactionBody_tokenAssociate_tag 40
#define Hedera_TransactionBody_tokenDissociate_tag 41

/* Struct field encoding specification for nanopb */
#define Hedera_TransactionBody_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transactionID,     1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  nodeAccountID,     2) \
X(a, STATIC,   SINGULAR, UINT64,   transactionFee,    3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transactionValidDuration,   4) \
X(a, STATIC,   SINGULAR, BOOL,     generateRecord,    5) \
X(a, STATIC,   SINGULAR, STRING,   memo,              6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,cryptoCreateAccount,data.cryptoCreateAccount),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,cryptoTransfer,data.cryptoTransfer),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,cryptoUpdateAccount,data.cryptoUpdateAccount),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,tokenMint,data.tokenMint),  37) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,tokenBurn,data.tokenBurn),  38) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,tokenAssociate,data.tokenAssociate),  40) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,tokenDissociate,data.tokenDissociate),  41)
#define Hedera_TransactionBody_CALLBACK NULL
#define Hedera_TransactionBody_DEFAULT NULL
#define Hedera_TransactionBody_transactionID_MSGTYPE Hedera_TransactionID
#define Hedera_TransactionBody_nodeAccountID_MSGTYPE Hedera_AccountID
#define Hedera_TransactionBody_transactionValidDuration_MSGTYPE Hedera_Duration
#define Hedera_TransactionBody_data_cryptoCreateAccount_MSGTYPE Hedera_CryptoCreateTransactionBody
#define Hedera_TransactionBody_data_cryptoTransfer_MSGTYPE Hedera_CryptoTransferTransactionBody
#define Hedera_TransactionBody_data_cryptoUpdateAccount_MSGTYPE Hedera_CryptoUpdateTransactionBody
#define Hedera_TransactionBody_data_tokenMint_MSGTYPE Hedera_TokenMintTransactionBody
#define Hedera_TransactionBody_data_tokenBurn_MSGTYPE Hedera_TokenBurnTransactionBody
#define Hedera_TransactionBody_data_tokenAssociate_MSGTYPE Hedera_TokenAssociateTransactionBody
#define Hedera_TransactionBody_data_tokenDissociate_MSGTYPE Hedera_TokenDissociateTransactionBody

extern const pb_msgdesc_t Hedera_TransactionBody_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Hedera_TransactionBody_fields &Hedera_TransactionBody_msg

/* Maximum encoded size of messages (where known) */
#if defined(Hedera_CryptoUpdateTransactionBody_size)
#define Hedera_TransactionBody_size              (282 + sizeof(union Hedera_TransactionBody_data_size_union))
union Hedera_TransactionBody_data_size_union {char f15[(6 + Hedera_CryptoUpdateTransactionBody_size)]; char f0[478];};
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
