/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_HEDERA_PROTO_CRYPTO_UPDATE_PB_H_INCLUDED
#define PB_HEDERA_PROTO_CRYPTO_UPDATE_PB_H_INCLUDED
#include <pb.h>
#include "proto/basic_types.pb.h"
#include "proto/duration.pb.h"
#include "proto/timestamp.pb.h"
#include "proto/wrappers.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 Change properties for the given account. Any null field is ignored (left
 unchanged). This transaction must be signed by the existing key for this
 account. If the transaction is changing the key field, then the transaction
 must be signed by both the old key (from before the change) and the new key.
 The old key must sign for security. The new key must sign as a safeguard to
 avoid accidentally changing to an invalid key, and then having no way to
 recover. */
typedef struct _Hedera_CryptoUpdateTransactionBody { 
    /* *
 The account ID which is being updated in this transaction */
    bool has_accountIDToUpdate;
    Hedera_AccountID accountIDToUpdate; 
    /* *
 The new key */
    bool has_key;
    Hedera_Key key; 
    /* *
 [Deprecated] ID of the account to which this account is proxy staked. If
 proxyAccountID is null, or is an invalid account, or is an account that
 isn't a node, then this account is automatically proxy staked to a node
 chosen by the network, but without earning payments. If the proxyAccountID
 account refuses to accept proxy staking , or if it is not currently running
 a node, then it will behave as if proxyAccountID was null. */
    bool has_proxyAccountID;
    Hedera_AccountID proxyAccountID; 
    /* *
 [Deprecated]. Payments earned from proxy staking are shared between the
 node and this account, with proxyFraction / 10000 going to this account */
    int32_t proxyFraction; 
    /* *
 [Deprecated]. The new threshold amount (in tinybars) for which an account
 record is created for any send/withdraw transaction */
    pb_size_t which_sendRecordThresholdField;
    union {
        uint64_t sendRecordThreshold;
        Hedera_UInt64Value sendRecordThresholdWrapper;
    } sendRecordThresholdField; 
    /* *
 [Deprecated]. The new threshold amount (in tinybars) for which an account
 record is created for any send/withdraw transaction */
    pb_size_t which_receiveRecordThresholdField;
    union {
        uint64_t receiveRecordThreshold;
        Hedera_UInt64Value receiveRecordThresholdWrapper;
    } receiveRecordThresholdField; 
    /* *
 [Deprecated]. The new threshold amount (in tinybars) for which an account
 record is created for any receive/deposit transaction. */
    bool has_autoRenewPeriod;
    Hedera_Duration autoRenewPeriod; 
    /* *
 [Deprecated]. The new threshold amount (in tinybars) for which an account
 record is created for any receive/deposit transaction. */
    bool has_expirationTime;
    Hedera_Timestamp expirationTime; 
    /* *
 The duration in which it will automatically extend the expiration period.
 If it doesn't have enough balance, it extends as long as possible. If it is
 empty when it expires, then it is deleted. */
    pb_size_t which_receiverSigRequiredField;
    union {
        bool receiverSigRequired;
        Hedera_BoolValue receiverSigRequiredWrapper;
    } receiverSigRequiredField; 
    /* *
 The new expiration time to extend to (ignored if equal to or before the
 current one) */
    bool has_memo;
    Hedera_StringValue memo; 
    /* *
 [Deprecated] Do NOT use this field to set a false value because the
 server cannot distinguish from the default value. Use
 receiverSigRequiredWrapper field for this purpose. */
    bool has_max_automatic_token_associations;
    Hedera_Int32Value max_automatic_token_associations; 
    /* *
 If true, this account's key must sign any transaction depositing into
 this account (in addition to all withdrawals) */
    pb_size_t which_staked_id;
    union {
        Hedera_AccountID staked_account_id;
        int64_t staked_node_id;
    } staked_id; 
    /* *
 If set, the new memo to be associated with the account (UTF-8 encoding max
 100 bytes) */
    bool has_decline_reward;
    Hedera_BoolValue decline_reward; 
} Hedera_CryptoUpdateTransactionBody;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Hedera_CryptoUpdateTransactionBody_init_default {false, Hedera_AccountID_init_default, false, Hedera_Key_init_default, false, Hedera_AccountID_init_default, 0, 0, {0}, 0, {0}, false, Hedera_Duration_init_default, false, Hedera_Timestamp_init_default, 0, {0}, false, Hedera_StringValue_init_default, false, Hedera_Int32Value_init_default, 0, {Hedera_AccountID_init_default}, false, Hedera_BoolValue_init_default}
#define Hedera_CryptoUpdateTransactionBody_init_zero {false, Hedera_AccountID_init_zero, false, Hedera_Key_init_zero, false, Hedera_AccountID_init_zero, 0, 0, {0}, 0, {0}, false, Hedera_Duration_init_zero, false, Hedera_Timestamp_init_zero, 0, {0}, false, Hedera_StringValue_init_zero, false, Hedera_Int32Value_init_zero, 0, {Hedera_AccountID_init_zero}, false, Hedera_BoolValue_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Hedera_CryptoUpdateTransactionBody_accountIDToUpdate_tag 2
#define Hedera_CryptoUpdateTransactionBody_key_tag 3
#define Hedera_CryptoUpdateTransactionBody_proxyAccountID_tag 4
#define Hedera_CryptoUpdateTransactionBody_proxyFraction_tag 5
#define Hedera_CryptoUpdateTransactionBody_sendRecordThreshold_tag 6
#define Hedera_CryptoUpdateTransactionBody_sendRecordThresholdWrapper_tag 11
#define Hedera_CryptoUpdateTransactionBody_receiveRecordThreshold_tag 7
#define Hedera_CryptoUpdateTransactionBody_receiveRecordThresholdWrapper_tag 12
#define Hedera_CryptoUpdateTransactionBody_autoRenewPeriod_tag 8
#define Hedera_CryptoUpdateTransactionBody_expirationTime_tag 9
#define Hedera_CryptoUpdateTransactionBody_receiverSigRequired_tag 10
#define Hedera_CryptoUpdateTransactionBody_receiverSigRequiredWrapper_tag 13
#define Hedera_CryptoUpdateTransactionBody_memo_tag 14
#define Hedera_CryptoUpdateTransactionBody_max_automatic_token_associations_tag 15
#define Hedera_CryptoUpdateTransactionBody_staked_account_id_tag 16
#define Hedera_CryptoUpdateTransactionBody_staked_node_id_tag 17
#define Hedera_CryptoUpdateTransactionBody_decline_reward_tag 18

/* Struct field encoding specification for nanopb */
#define Hedera_CryptoUpdateTransactionBody_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  accountIDToUpdate,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  key,               3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  proxyAccountID,    4) \
X(a, STATIC,   SINGULAR, INT32,    proxyFraction,     5) \
X(a, STATIC,   ONEOF,    UINT64,   (sendRecordThresholdField,sendRecordThreshold,sendRecordThresholdField.sendRecordThreshold),   6) \
X(a, STATIC,   ONEOF,    UINT64,   (receiveRecordThresholdField,receiveRecordThreshold,receiveRecordThresholdField.receiveRecordThreshold),   7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  autoRenewPeriod,   8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  expirationTime,    9) \
X(a, STATIC,   ONEOF,    BOOL,     (receiverSigRequiredField,receiverSigRequired,receiverSigRequiredField.receiverSigRequired),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (sendRecordThresholdField,sendRecordThresholdWrapper,sendRecordThresholdField.sendRecordThresholdWrapper),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (receiveRecordThresholdField,receiveRecordThresholdWrapper,receiveRecordThresholdField.receiveRecordThresholdWrapper),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (receiverSigRequiredField,receiverSigRequiredWrapper,receiverSigRequiredField.receiverSigRequiredWrapper),  13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  memo,             14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  max_automatic_token_associations,  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (staked_id,staked_account_id,staked_id.staked_account_id),  16) \
X(a, STATIC,   ONEOF,    INT64,    (staked_id,staked_node_id,staked_id.staked_node_id),  17) \
X(a, STATIC,   OPTIONAL, MESSAGE,  decline_reward,   18)
#define Hedera_CryptoUpdateTransactionBody_CALLBACK NULL
#define Hedera_CryptoUpdateTransactionBody_DEFAULT NULL
#define Hedera_CryptoUpdateTransactionBody_accountIDToUpdate_MSGTYPE Hedera_AccountID
#define Hedera_CryptoUpdateTransactionBody_key_MSGTYPE Hedera_Key
#define Hedera_CryptoUpdateTransactionBody_proxyAccountID_MSGTYPE Hedera_AccountID
#define Hedera_CryptoUpdateTransactionBody_autoRenewPeriod_MSGTYPE Hedera_Duration
#define Hedera_CryptoUpdateTransactionBody_expirationTime_MSGTYPE Hedera_Timestamp
#define Hedera_CryptoUpdateTransactionBody_sendRecordThresholdField_sendRecordThresholdWrapper_MSGTYPE Hedera_UInt64Value
#define Hedera_CryptoUpdateTransactionBody_receiveRecordThresholdField_receiveRecordThresholdWrapper_MSGTYPE Hedera_UInt64Value
#define Hedera_CryptoUpdateTransactionBody_receiverSigRequiredField_receiverSigRequiredWrapper_MSGTYPE Hedera_BoolValue
#define Hedera_CryptoUpdateTransactionBody_memo_MSGTYPE Hedera_StringValue
#define Hedera_CryptoUpdateTransactionBody_max_automatic_token_associations_MSGTYPE Hedera_Int32Value
#define Hedera_CryptoUpdateTransactionBody_staked_id_staked_account_id_MSGTYPE Hedera_AccountID
#define Hedera_CryptoUpdateTransactionBody_decline_reward_MSGTYPE Hedera_BoolValue

extern const pb_msgdesc_t Hedera_CryptoUpdateTransactionBody_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Hedera_CryptoUpdateTransactionBody_fields &Hedera_CryptoUpdateTransactionBody_msg

/* Maximum encoded size of messages (where known) */
#if defined(Hedera_StringValue_size)
#define Hedera_CryptoUpdateTransactionBody_size  (325 + Hedera_StringValue_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
